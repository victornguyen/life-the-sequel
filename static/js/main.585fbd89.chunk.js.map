{"version":3,"sources":["components/GlobalStyles.tsx","utils/getCell.ts","utils/evolveCells.ts","utils/generateCells.ts","constants/config.ts","utils/toggleCell.ts","components/Cell.tsx","components/Row.tsx","components/Board.tsx","constants/button.ts","components/Button.tsx","components/Slider.tsx","data/example.ts","components/App.tsx","hooks/useCells.ts","hooks/useInterval.ts","reportWebVitals.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","normalize","getCell","x","y","cells","undefined","e","shouldCellLive","isAlive","liveNeighbourCount","maxRows","length","maxCols","cols","liveNeighbours","possibleY","possibleX","neighbour","push","countLiveNeighbours","evolveCells","map","row","cell","generateCells","rows","random","Array","from","Math","toggleCell","cellsCopy","JSON","parse","stringify","cellToToggle","CellStyles","styled","div","Cell","toggle","onClick","RowStyles","Row","BoardStyles","Board","buttonThemes","normal","base","hover","active","stop","ButtonStyles","button","theme","Button","children","disabled","type","SliderStyles","Slider","id","label","max","min","onChange","step","value","htmlFor","multiplyArray","arr","flat","Controls","AppStyles","App","useState","evolving","setEvolving","rate","setRate","initialCells","setCells","evolve","generate","reset","useCells","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","useCallback","start","newGame","resetGame","loadExample","changeRate","parseInt","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.585fbd89.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nconst GlobalStyles = createGlobalStyle`\n  ${normalize}\n  html {\n    box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nexport default GlobalStyles;\n","import { BoardCell, Coords } from '../types/board';\n\n// Returns the cell value at the given coordinates of given cells.\n// Returns `null` when a cell isn't found.\nexport default function getCell({\n  x,\n  y,\n  cells = [],\n}: Coords): BoardCell | null {\n  try {\n    if (cells[y][x] === undefined) {\n      return null;\n    }\n    return cells[y][x];\n  } catch (e) {\n    return null;\n  }\n}\n","import { Board, BoardCell, Coords } from '../types/board';\nimport getCell from './getCell';\n\n// Returns the the number of live neighbours at a set of given coordinates\nexport function countLiveNeighbours({ x, y, cells }: Coords): number {\n  // Return zero neighbours if cell is out of bounds\n  if (getCell({ x, y, cells }) === null) {\n    return 0;\n  }\n\n  // Possible x and y coords for neighbouring cells.\n  // Cells at the edges of the game board will include coordinates at the\n  // opposite end of the game board as neighbouring cells.\n  const maxRows = cells.length - 1;\n  const maxCols = cells[0].length - 1;\n  const rows = [y > 0 ? y - 1 : maxRows, y, y < maxRows ? y + 1 : 0];\n  const cols = [x > 0 ? x - 1 : maxCols, x, x < maxCols ? x + 1 : 0];\n\n  const liveNeighbours: BoardCell[] = [];\n\n  // For each possible neighbouring row coordinate...\n  for (const possibleY of rows) {\n    // ... check each possible neighbouring column coordinate\n    for (const possibleX of cols) {\n      // Ignore if it's the actual cell we're trying to find neighbours of\n      const isSubjectCell = possibleX === x && possibleY === y;\n      if (isSubjectCell) {\n        continue;\n      }\n\n      // Ignore if the neighbour isn't alive or doesn't exist\n      const neighbour = getCell({ x: possibleX, y: possibleY, cells });\n      if (neighbour !== true) {\n        continue;\n      }\n\n      // Otherwise push to live neighbours array\n      liveNeighbours.push(neighbour);\n    }\n  }\n\n  return liveNeighbours.length;\n}\n\n// Returns true when a given cell should live according the game's rules\nexport function shouldCellLive({\n  x,\n  y,\n  cells,\n  isAlive,\n}: Coords & { isAlive: boolean }): boolean {\n  const liveNeighbourCount = countLiveNeighbours({ x, y, cells });\n  return isAlive\n    ? // A Cell with fewer than two live neighbours dies of under-population.\n      // A Cell with 2 or 3 live neighbours lives on to the next generation.\n      // A Cell with more than 3 live neighbours dies of overcrowding.\n      liveNeighbourCount === 2 || liveNeighbourCount === 3\n    : // An empty Cell with exactly 3 live neighbours \"comes to life\".\n      liveNeighbourCount === 3;\n}\n\n// Returns an updated Board after applying the rules of the Game of Life\nexport default function evolveCells(cells: Board): Board {\n  return cells.map((row, y) => {\n    return row.map((cell, x) => shouldCellLive({ x, y, isAlive: cell, cells }));\n  });\n}\n","import { COLS, ROWS } from '../constants/config';\nimport { Board, BoardRow, BoardCell } from '../types/board';\n\ninterface GenerateCellsArgs {\n  rows?: number;\n  cols?: number;\n  random?: boolean;\n}\n\nexport default function generateCells({\n  rows = ROWS,\n  cols = COLS,\n  random = true,\n}: GenerateCellsArgs): Board {\n  return Array.from({ length: rows }, (): BoardRow => {\n    return Array.from({ length: cols }, (): BoardCell => {\n      return random ? Math.random() >= 0.6 : false;\n    });\n  });\n}\n","export const ROWS = 30;\nexport const COLS = 50;\nexport const RATE = 120;\n","import getCell from './getCell';\nimport { Board, Coords } from '../types/board';\n\n// Toggles the cell value at the given coordinates of given cells\nexport default function toggleCell({ x, y, cells = [] }: Coords): Board {\n  const cellsCopy = JSON.parse(JSON.stringify(cells));\n  const cellToToggle = getCell({ x, y, cells: cellsCopy });\n  if (cellToToggle !== null) {\n    cellsCopy[y][x] = !cellToToggle;\n  }\n  return cellsCopy;\n}\n","import styled from 'styled-components';\n\nconst CellStyles = styled.div<{ isAlive: boolean }>`\n  width: 12px;\n  height: 12px;\n  border-bottom: 1px solid white;\n  border-right: 1px solid white;\n  cursor: pointer;\n  background: ${({ isAlive }) => (isAlive ? '#3BA087' : '#E3F0EB')};\n\n  &:hover {\n    background: ${({ isAlive }) => (isAlive ? '#98E9DD' : '#C2DFD5')};\n  }\n`;\n\ninterface Props {\n  isAlive: boolean;\n  toggle: (x: number, y: number) => void;\n  x: number;\n  y: number;\n}\n\nconst Cell = ({ isAlive, toggle, x, y }: Props): JSX.Element => {\n  const handleToggle = () => toggle(x, y);\n  return <CellStyles isAlive={isAlive} onClick={handleToggle} />;\n};\n\nexport default Cell;\n","import styled from 'styled-components';\nimport Cell from './Cell';\nimport { BoardRow } from '../types/board';\n\nconst RowStyles = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\ninterface Props {\n  row: BoardRow;\n  toggle: (x: number, y: number) => void;\n  y: number;\n}\n\nconst Row = ({ row, toggle, y }: Props): JSX.Element => {\n  return (\n    <RowStyles>\n      {row.map((isAlive, x) => (\n        <Cell isAlive={isAlive} key={x} toggle={toggle} x={x} y={y} />\n      ))}\n    </RowStyles>\n  );\n};\n\nexport default Row;\n","import styled from 'styled-components';\nimport Row from './Row';\nimport { BoardRow } from '../types/board';\n\nconst BoardStyles = styled.div`\n  display: inline-block;\n  margin: 10px 0 30px;\n`;\n\ninterface Props {\n  cells: Array<BoardRow>;\n  toggle: (x: number, y: number) => void;\n}\n\nconst Board = ({ cells, toggle }: Props): JSX.Element => {\n  return (\n    <BoardStyles>\n      {cells.map((row, y) => (\n        <Row row={row} key={y} toggle={toggle} y={y} />\n      ))}\n    </BoardStyles>\n  );\n};\n\nexport default Board;\n","import { ButtonThemes } from '../types/button';\n\nexport const buttonThemes: ButtonThemes = {\n  normal: {\n    base: '#3BA087',\n    hover: '#4CE0CA',\n    active: '#46CCB8',\n  },\n  stop: {\n    base: '#D54D55',\n    hover: '#CC2F1E',\n    active: '#A72719',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { buttonThemes } from '../constants/button';\nimport { ThemeOption } from '../types/button';\n\nconst ButtonStyles = styled.button<{ theme: ThemeOption }>`\n  display: inline-block;\n  color: #fff;\n  text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3);\n  min-width: 160px;\n  border: 0;\n  outline: 0;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: bold;\n  margin-right: 10px;\n  padding: 10px 0 12px;\n  cursor: pointer;\n  background: ${({ theme }) => buttonThemes[theme as ThemeOption].base};\n  &:hover {\n    background: ${({ theme }) => buttonThemes[theme as ThemeOption].hover};\n  }\n  &:active {\n    background: ${({ theme }) => buttonThemes[theme as ThemeOption].active};\n  }\n  &:disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n`;\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  disabled?: boolean;\n  onClick: () => void;\n  theme?: ThemeOption;\n}\n\ntype Props = ButtonProps & React.HTMLProps<HTMLButtonElement>;\n\nconst Button = ({\n  children,\n  disabled = false,\n  onClick,\n  theme = 'normal',\n}: Props): JSX.Element => {\n  return (\n    <ButtonStyles\n      disabled={disabled}\n      onClick={onClick}\n      theme={theme}\n      type=\"button\"\n    >\n      {children}\n    </ButtonStyles>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SliderStyles = styled.div`\n  margin-top: 20px;\n`;\n\ninterface SliderProps {\n  label: string;\n}\n\ntype Props = SliderProps & React.HTMLProps<HTMLInputElement>;\n\nconst Slider = ({\n  id,\n  label,\n  max,\n  min,\n  onChange,\n  step,\n  value,\n}: Props): JSX.Element => {\n  return (\n    <SliderStyles>\n      <label htmlFor={id}>{label}: </label>\n      <input\n        id={id}\n        max={max}\n        min={min}\n        onChange={onChange}\n        step={step}\n        type=\"range\"\n        value={value}\n      />\n      {value}ms\n    </SliderStyles>\n  );\n};\n\nexport default Slider;\n","import { Board } from '../types/board';\n\n// Repeats arrays n times\nfunction multiplyArray(arr: any[], length: number) {\n  return Array.from({ length }, () => arr).flat();\n}\n\nexport default function example(length: number): Board {\n  // The example sequence provided:\n  // https://user-images.githubusercontent.com/7149052/53603476-bfb00e00-3c05-11e9-8862-1dfd31836dcd.jpg\n  const cells = [\n    [false, false, false, false, false],\n    [false, false, true, false, false],\n    [false, false, false, true, false],\n    [false, true, true, true, false],\n    [false, false, false, false, false],\n  ];\n\n  return multiplyArray(\n    cells.map((row) => multiplyArray(row, length)),\n    length\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport useInterval from '../hooks/useInterval';\nimport useCells from '../hooks/useCells';\nimport Board from './Board';\nimport Button from './Button';\nimport Slider from './Slider';\nimport { RATE } from '../constants/config';\nimport example from '../data/example';\n\nconst Controls = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst AppStyles = styled.div`\n  text-align: center;\n`;\n\nconst App = (): JSX.Element => {\n  const [evolving, setEvolving] = useState(false);\n  const [rate, setRate] = useState(RATE);\n  const { cells, evolve, generate, reset, setCells, toggle } = useCells();\n\n  useInterval(() => {\n    if (evolving) {\n      evolve();\n    }\n  }, rate);\n\n  const stop = useCallback((): void => {\n    setEvolving(false);\n  }, []);\n\n  const start = useCallback((): void => {\n    if (!evolving) {\n      setEvolving(true);\n    }\n    evolve();\n  }, [evolving, cells]);\n\n  const newGame = useCallback((): void => {\n    stop();\n    generate();\n  }, []);\n\n  const resetGame = useCallback((): void => {\n    stop();\n    reset();\n  }, []);\n\n  const loadExample = useCallback(() => {\n    stop();\n    setCells(example(6));\n  }, []);\n\n  const changeRate = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>): void => {\n      setRate(parseInt(e.target.value));\n    },\n    []\n  );\n\n  return (\n    <AppStyles>\n      <h1>The Game of Life II: Judgement Day 🤖</h1>\n      <p>💡 Tip: you can click on a cell to (un)kill it.</p>\n      <Board cells={cells} toggle={toggle} />\n      <Controls>\n        <Button type=\"button\" onClick={newGame}>\n          New game\n        </Button>\n        <Button type=\"button\" onClick={resetGame}>\n          Reset game\n        </Button>\n        <Button type=\"button\" onClick={loadExample}>\n          Load example\n        </Button>\n      </Controls>\n      <Controls>\n        <Button type=\"button\" onClick={evolve} disabled={evolving}>\n          Next generation\n        </Button>\n        {evolving ? (\n          <Button type=\"button\" onClick={stop} theme=\"stop\">\n            Stop evolution\n          </Button>\n        ) : (\n          <Button type=\"button\" onClick={start}>\n            Start evolution\n          </Button>\n        )}\n        <Slider\n          id=\"rate\"\n          label=\"Evo speed\"\n          max={500}\n          min={40}\n          onChange={changeRate}\n          step={20}\n          value={rate}\n        />\n      </Controls>\n    </AppStyles>\n  );\n};\n\nexport default App;\n","import { SetStateAction, useState } from 'react';\nimport evolveCells from '../utils/evolveCells';\nimport generateCells from '../utils/generateCells';\nimport toggleCell from '../utils/toggleCell';\nimport { Board } from '../types/board';\n\ninterface UseCells {\n  cells: Board;\n  evolve: () => void;\n  generate: () => void;\n  reset: () => void;\n  setCells: React.Dispatch<SetStateAction<Board>>;\n  toggle: (x: number, y: number) => void;\n}\n\nexport default function useCells(\n  initialCells = generateCells({ random: true })\n): UseCells {\n  const [cells, setCells] = useState<Board>(initialCells);\n\n  const generate = (): void => {\n    setCells(generateCells({ random: true }));\n  };\n\n  const reset = (): void => {\n    setCells(generateCells({ random: false }));\n  };\n\n  const evolve = (): void => {\n    setCells(evolveCells(cells));\n  };\n\n  const toggle = (x: number, y: number): void => {\n    setCells(\n      toggleCell({\n        x,\n        y,\n        cells,\n      })\n    );\n  };\n\n  return {\n    cells,\n    evolve,\n    generate,\n    reset,\n    setCells,\n    toggle,\n  };\n}\n","import { useEffect, useRef } from 'react';\n\n// Stolen from: https://usehooks-typescript.com/react-hook/use-interval\nexport default function useInterval(\n  callback: () => void,\n  delay: number | null\n): void {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (delay === null) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from './components/GlobalStyles';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}